// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use blake2::{Blake2s256, Digest};
use common::*;
use risc0_zkvm::{default_prover, ExecutorEnv};

use clap::Parser;

#[derive(Parser, Debug)]
#[command(version, about, long_about = None)]
enum Action {
    Stf,
    // Nullifier,
    Transfer,
}

fn stf_prove_stark() {
    let mut rng = rand::thread_rng();

    let state: State = [(0, 1000)].into_iter().collect();
    let journal = vec![];
    let zone_input = Input::Transfer {
        from: 0,
        to: 1,
        amount: 10,
    };

    let in_state_cm = calculate_state_hash(&state);
    let in_journal_cm = calculate_journal_hash(&journal);
    let in_state_root = cl::merkle::node(in_state_cm, in_journal_cm);
    let in_note = cl::NoteWitness::new(1, "ZONE", in_state_root, &mut rng);

    let mut out_journal = journal.clone();
    out_journal.push(zone_input);

    let out_state_cm = calculate_state_hash(&stf(state.clone(), zone_input));
    let out_journal_cm = calculate_journal_hash(&out_journal);
    let out_state_root = cl::merkle::node(out_state_cm, out_journal_cm);
    let out_note = cl::NoteWitness::new(1, "ZONE", out_state_root, &mut rng);

    let input = cl::InputWitness::random(in_note, &mut rng);
    let output = cl::OutputWitness::random(
        out_note,
        cl::NullifierSecret::random(&mut rng).commit(),
        &mut rng,
    );
    let ptx = cl::PartialTx::from_witness(cl::PartialTxWitness {
        inputs: vec![input.clone()],
        outputs: vec![output.clone()],
    });

    let ptx_root = ptx.root().0;
    let in_ptx_path = ptx.input_merkle_path(0);
    let out_ptx_path = ptx.output_merkle_path(0);

    let env = ExecutorEnv::builder()
        .write(&ptx_root)
        .unwrap()
        .write(&ptx.input_root())
        .unwrap()
        .write(&ptx.output_root())
        .unwrap()
        .write(&in_ptx_path)
        .unwrap()
        .write(&out_ptx_path)
        .unwrap()
        .write(&input)
        .unwrap()
        .write(&output)
        .unwrap()
        .write(&zone_input)
        .unwrap()
        .write(&state)
        .unwrap()
        .write(&journal)
        .unwrap()
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    use std::time::Instant;
    let start_t = Instant::now();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let opts = risc0_zkvm::ProverOpts::succinct();
    let prove_info = prover
        .prove_with_opts(env, methods::METHOD_ELF, &opts)
        .unwrap();

    println!("STARK prover time: {:.2?}", start_t.elapsed());
    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    std::fs::write("proof.stark", bincode::serialize(&receipt).unwrap()).unwrap();
    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt.verify(methods::METHOD_ID).unwrap();
}

// fn nf_prove_stark() {
//     let mut rng = rand::thread_rng();

//     let nf_sk = cl::NullifierSecret::random(&mut rng);

//     let output = cl::OutputWitness {
//         note: cl::NoteWitness {
//             balance: cl::BalanceWitness::random(10, "NMO", &mut rng),
//             death_constraint: vec![],
//             state: [0u8; 32],
//         },
//         nf_pk: nf_sk.commit(),
//         nonce: cl::NullifierNonce::random(&mut rng),
//     };
//     let output_cm = output.commit_note().as_bytes().to_vec();
//     let cm_set = cl::merkle::padded_leaves::<64>(&[output_cm]);
//     let cm_root = cl::merkle::root(cm_set);
//     let cm_path = cl::merkle::path(cm_set, 0);
//     let nf = cl::Nullifier::new(nf_sk, output.nonce);

//     let env = ExecutorEnv::builder()
//         .write(&cm_root)
//         .unwrap()
//         .write(&nf)
//         .unwrap()
//         .write(&nf_sk)
//         .unwrap()
//         .write(&output)
//         .unwrap()
//         .write(&cm_path)
//         .unwrap()
//         .build()
//         .unwrap();

//     // Obtain the default prover.
//     let prover = default_prover();

//     use std::time::Instant;
//     let start_t = Instant::now();

//     // Proof information by proving the specified ELF binary.
//     // This struct contains the receipt along with statistics about execution of the guest
//     let opts = risc0_zkvm::ProverOpts::succinct();
//     let prove_info = prover
//         .prove_with_opts(env, methods::NULLIFIER_ELF, &opts)
//         .unwrap();

//     println!("STARK prover time: {:.2?}", start_t.elapsed());
//     // extract the receipt.
//     let receipt = prove_info.receipt;

//     // TODO: Implement code for retrieving receipt journal here.

//     std::fs::write("proof.stark", bincode::serialize(&receipt).unwrap()).unwrap();
//     // The receipt was verified at the end of proving, but the below code is an
//     // example of how someone else could verify this receipt.
//     receipt.verify(methods::NULLIFIER_ID).unwrap();
// }

fn transfer_prove_stark() {}

fn main() {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    let action = Action::parse();

    match action {
        Action::Stf => stf_prove_stark(),
        // Action::Nullifier => nf_prove_stark(),
        Action::Transfer => transfer_prove_stark(),
    }
}

fn calculate_state_hash(state: &State) -> [u8; 32] {
    let bytes = bincode::serialize(state).unwrap();
    Blake2s256::digest(&bytes).into()
}

fn calculate_journal_hash(journal: &Journal) -> [u8; 32] {
    let bytes = bincode::serialize(journal).unwrap();
    Blake2s256::digest(&bytes).into()
}
